trigger:
- master

pr:
- master

stages:

- stage: build

  variables:
    nodeVersion: 12.x
    appDir: ./HealthPair

  jobs:

  - job: build

    pool:
      vmImage: ubuntu-latest

    steps:

    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'HealthPairDocker'
        dockerComposeFile: 'docker-compose.prod.yml'
        action: 'Build services'
      displayName: docker-compose build

  - job: test

    pool:
      vmImage: ubuntu-latest

    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: node $(nodeVersion)

    - script: npm ci
      workingDirectory: $(appDir)
      displayName: npm install

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'HealthPairSC'
        organization: '2002-feb24-net'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '2002-feb24-net_HealthPair-Client'
        cliProjectName: 'HealthPairClient'
        cliSources: '$(appDir)/src'
        extraProperties: |
          sonar.coverage.exclusions=**/*.spec.ts
          sonar.typescript.lcov.reportPaths=$(appDir)/coverage/$(appDir)/lcov.info
      displayName: sonarcloud analysis prepare

    - script: npx ng test --browsers ChromeHeadless --no-watch --code-coverage
      workingDirectory: $(appDir)
      displayName: ng test

    - script: npm run lint
      workingDirectory: $(appDir)
      displayName: ng lint

    - task: SonarCloudAnalyze@1
      displayName: sonarcloud analysis run

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
      displayName: sonarcloud results build publish

- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: build

  jobs:

  - deployment: deploy_dev

    pool:
      vmImage: ubuntu-latest

    environment: dev

    strategy:
      runOnce:
        deploy:
          steps:

          - checkout: self

          - download: none

          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'HealthPairDocker'
              dockerComposeFile: 'docker-compose.prod.yml'
              action: 'Build services'
            displayName: docker-compose build

          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'HealthPairDocker'
              dockerComposeFile: 'docker-compose.prod.yml'
              action: 'Push services'
            displayName: docker-compose push

          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: 'Azure subscription 1(3)(a2152353-9b25-48cf-bad2-948e50f630f2)'
              appName: 'HealthPair-Client'
              multicontainerConfigFile: 'docker-compose.prod.yml'
            displayName: azure app service deploy